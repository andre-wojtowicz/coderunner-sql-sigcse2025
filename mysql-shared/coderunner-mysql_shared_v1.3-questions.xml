<?xml version="1.0" encoding="utf-8"?>
<quiz>
	<question type="description">
		<name>
			<text>MySQL - 00 - Introduction</text>
		</name>
		<questiontext format="markdown">
			<text>The following materials describe the mechanism that automatically validates SQL statements on shared MySQL server.

Database: `bookstore`.

SQL file: [`bookstore-create-insert.sql`](@@PLUGINFILE@@/bookstore-create-insert.sql)

Diagram of tables:

&lt;img alt="" class="img-responsive" src="@@PLUGINFILE@@/bookstore-diagram.png"/&gt;</text>
			<file name="bookstore-create-insert.sql" path="/" encoding="base64">RFJPUCBUQUJMRSBJRiBFWElTVFMgQm9va3MsIEF1dGhvcnM7CgpDUkVBVEUgVEFCTEUgQXV0aG9ycwooCiAgICBpZF9hdXRob3IgSU5UIEFVVE9fSU5DUkVNRU5UIFBSSU1BUlkgS0VZLAogICAgbmFtZSAgICAgIFZBUkNIQVIoMzApLAogICAgY291bnRyeSAgIFZBUkNIQVIoMTUpCik7CgpDUkVBVEUgVEFCTEUgQm9va3MKKAogICAgaWRfYm9vayAgIElOVCBBVVRPX0lOQ1JFTUVOVCBQUklNQVJZIEtFWSwKICAgIGF1dGhvciAgICBJTlQsCiAgICB0aXRsZSAgICAgVkFSQ0hBUig1MCksCiAgICBwcmljZSAgICAgTlVNRVJJQygxMCwgMiksCiAgICBwdWJfeWVhciAgSU5ULAogICAgZ2VucmUgICAgIFZBUkNIQVIoMzApLAogICAgRk9SRUlHTiBLRVkgKGF1dGhvcikgUkVGRVJFTkNFUyBBdXRob3JzKGlkX2F1dGhvcikKKTsKCklOU0VSVCBJTlRPIEF1dGhvcnMgKGlkX2F1dGhvciwgbmFtZSwgY291bnRyeSkgVkFMVUVTIAooMSwgJ1VsbG1hbicsICAgICdVU0EnKSwKKDIsICdIb3NzZWluaScsICAnQWZnaGFuaXN0YW4nKSwKKDMsICdIdXhsZXknLCAgICAnRW5nbGFuZCcpLAooNCwgJ1llbicsICAgICAgICdVU0EnKSwKKDUsICdDZXJ2YW50ZXMnLCAnU3BhaW4nKTsKCklOU0VSVCBJTlRPIEJvb2tzIChhdXRob3IsIHRpdGxlLCBwcmljZSwgcHViX3llYXIsIGdlbnJlKSBWQUxVRVMgCigxLCAnRWxlbWVudHMgb2YgTUwgUHJvZ3JhbW1pbmcnLCA2MCwgMTk5OCwgJ2NvbXB1dGVyIHNjaWVuY2UnKSwKKDEsICdNaW5pbmcgb2YgbWFzc2l2ZSBkYXRhc2V0cycsIDc1LCAyMDE0LCAnY29tcHV0ZXIgc2NpZW5jZScpLAooMiwgJ1RoZSBLaXRlIFJ1bm5lcicsICAgICAgICAgICAgMzIsIDIwMDQsICdkcmFtYScpLAooMywgJ0JyYXZlIE5ldyBXb3JsZCcsICAgICAgICAgICAgMjUsIDE5MzIgLCdzY2llbmNlIGZpY3Rpb24nKSwKKDMsICdJc2xhbmQnLCAgICAgICAgICAgICAgICAgICAgIDMwLCAxOTYyLCAnc2NpZW5jZSBmaWN0aW9uJyksCigzLCAnQXBlIGFuZCBFc3NlbmNlJywgICAgICAgICAgICAyMCwgMTk0OCwgJ3NjaWVuY2UgZmljdGlvbicpLAooNCwgJ0Z1enp5IExvZ2ljJywgICAgICAgICAgICAgICAgNTUsIDE5OTksICdjb21wdXRlciBzY2llbmNlJyk7Cg==</file>
			<file name="bookstore-diagram.png" path="/" encoding="base64"></file>
		</questiontext>
		<generalfeedback format="markdown">
			<text></text>
		</generalfeedback>
		<defaultgrade>0.0</defaultgrade>
		<penalty>0.0</penalty>
		<hidden>0</hidden>
		<idnumber></idnumber>
	</question>
	<question type="coderunner">
		<coderunnertype>mysql_shared_v1.3</coderunnertype>
		<name>
			<text>MySQL - 01 - simple SELECT</text>
		</name>
		<questiontext format="markdown">
			<text>Most of the tasks are about writing `SELECT` statements.

From `Books` table select `title` and `price` columns; order rows by `title`.</text>
		</questiontext>
		<generalfeedback format="markdown">
			<text></text>
		</generalfeedback>
		<defaultgrade>1</defaultgrade>
		<penalty>0</penalty>
		<hidden>0</hidden>
		<idnumber></idnumber>
		<prototypetype>0</prototypetype>
		<allornothing>1</allornothing>
		<penaltyregime>0</penaltyregime>
		<precheck>0</precheck>
		<hidecheck>0</hidecheck>
		<showsource>0</showsource>
		<answerboxlines>18</answerboxlines>
		<answerboxcolumns>100</answerboxcolumns>
		<answerpreload></answerpreload>
		<globalextra></globalextra>
		<useace></useace>
		<resultcolumns></resultcolumns>
		<template></template>
		<iscombinatortemplate></iscombinatortemplate>
		<allowmultiplestdins></allowmultiplestdins>
		<answer>SELECT   title,
         price
FROM     Books
ORDER BY title;</answer>
		<validateonsave>1</validateonsave>
		<testsplitterre></testsplitterre>
		<language></language>
		<acelang></acelang>
		<sandbox></sandbox>
		<grader></grader>
		<cputimelimitsecs></cputimelimitsecs>
		<memlimitmb></memlimitmb>
		<sandboxparams></sandboxparams>
		<templateparams></templateparams>
		<hoisttemplateparams>1</hoisttemplateparams>
		<templateparamslang>None</templateparamslang>
		<templateparamsevalpertry>1</templateparamsevalpertry>
		<templateparamsevald>{}</templateparamsevald>
		<twigall>0</twigall>
		<uiplugin></uiplugin>
		<uiparameters></uiparameters>
		<attachments>0</attachments>
		<attachmentsrequired>0</attachmentsrequired>
		<maxfilesize>10240</maxfilesize>
		<filenamesregex></filenamesregex>
		<filenamesexplain></filenamesexplain>
		<displayfeedback>1</displayfeedback>
		<testcases>
			<testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0">
				<testcode>
					<text></text>
				</testcode>
				<stdin>
					<text></text>
				</stdin>
				<expected>
					<text>                        title  price
1             Ape and Essence  20.00
2             Brave New World  25.00
3  Elements of ML Programming  60.00
4                 Fuzzy Logic  55.00
5                      Island  30.00
6  Mining of massive datasets  75.00
7             The Kite Runner  32.00</text>
				</expected>
				<extra>
					<text>__db_code__ = r'''
DROP TABLE IF EXISTS Books, Authors;

CREATE TABLE Authors
(
    id_author INT AUTO_INCREMENT PRIMARY KEY,
    name      VARCHAR(30),
    country   VARCHAR(15)
);

CREATE TABLE Books
(
    id_book   INT AUTO_INCREMENT PRIMARY KEY,
    author    INT,
    title     VARCHAR(50),
    price     NUMERIC(10, 2),
    pub_year  INT,
    genre     VARCHAR(30),
    FOREIGN KEY (author) REFERENCES Authors(id_author)
);

INSERT INTO Authors (id_author, name, country) VALUES 
(1, 'Ullman',    'USA'),
(2, 'Hosseini',  'Afghanistan'),
(3, 'Huxley',    'England'),
(4, 'Yen',       'USA'),
(5, 'Cervantes', 'Spain');

INSERT INTO Books (author, title, price, pub_year, genre) VALUES 
(1, 'Elements of ML Programming', 60, 1998, 'computer science'),
(1, 'Mining of massive datasets', 75, 2014, 'computer science'),
(2, 'The Kite Runner',            32, 2004, 'drama'),
(3, 'Brave New World',            25, 1932 ,'science fiction'),
(3, 'Island',                     30, 1962, 'science fiction'),
(3, 'Ape and Essence',            20, 1948, 'science fiction'),
(4, 'Fuzzy Logic',                55, 1999, 'computer science');
'''
invoke_cursor_sql(__db_code__)
print(invoke_cursor_sql(__student_answer__))</text>
				</extra>
				<display>
					<text>SHOW</text>
				</display>
				<outcome>15</outcome>
				<stderr></stderr>
			</testcase>
		</testcases>
	</question>
	<question type="coderunner">
		<coderunnertype>mysql_shared_v1.3</coderunnertype>
		<name>
			<text>MySQL - 02 - simple INSERT</text>
		</name>
		<questiontext format="markdown">
			<text>Question may also ask a student to write e.g. DML statement.

Insert into `Authors` table a record about Verne from France with id equal to 10.</text>
		</questiontext>
		<generalfeedback format="markdown">
			<text></text>
		</generalfeedback>
		<defaultgrade>1</defaultgrade>
		<penalty>0</penalty>
		<hidden>0</hidden>
		<idnumber></idnumber>
		<prototypetype>0</prototypetype>
		<allornothing>1</allornothing>
		<penaltyregime>0</penaltyregime>
		<precheck>0</precheck>
		<hidecheck>0</hidecheck>
		<showsource>0</showsource>
		<answerboxlines>18</answerboxlines>
		<answerboxcolumns>100</answerboxcolumns>
		<answerpreload></answerpreload>
		<globalextra></globalextra>
		<useace></useace>
		<resultcolumns></resultcolumns>
		<template></template>
		<iscombinatortemplate></iscombinatortemplate>
		<allowmultiplestdins></allowmultiplestdins>
		<answer>INSERT INTO Authors VALUES (10, 'Verne', 'France');</answer>
		<validateonsave>1</validateonsave>
		<testsplitterre></testsplitterre>
		<language></language>
		<acelang></acelang>
		<sandbox></sandbox>
		<grader></grader>
		<cputimelimitsecs></cputimelimitsecs>
		<memlimitmb></memlimitmb>
		<sandboxparams></sandboxparams>
		<templateparams></templateparams>
		<hoisttemplateparams>1</hoisttemplateparams>
		<templateparamslang>None</templateparamslang>
		<templateparamsevalpertry>1</templateparamsevalpertry>
		<templateparamsevald>{}</templateparamsevald>
		<twigall>0</twigall>
		<uiplugin></uiplugin>
		<uiparameters></uiparameters>
		<attachments>0</attachments>
		<attachmentsrequired>0</attachmentsrequired>
		<maxfilesize>10240</maxfilesize>
		<filenamesregex></filenamesregex>
		<filenamesexplain></filenamesexplain>
		<displayfeedback>1</displayfeedback>
		<testcases>
			<testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0">
				<testcode>
					<text></text>
				</testcode>
				<stdin>
					<text></text>
				</stdin>
				<expected>
					<text>   id_author       name      country
1          1     Ullman          USA
2          2   Hosseini  Afghanistan
3          3     Huxley      England
4          4        Yen          USA
5          5  Cervantes        Spain
6         10      Verne       France</text>
				</expected>
				<extra>
					<text>__db_code__ = r'''
DROP TABLE IF EXISTS Books, Authors;

CREATE TABLE Authors
(
    id_author INT AUTO_INCREMENT PRIMARY KEY,
    name      VARCHAR(30),
    country   VARCHAR(15)
);

CREATE TABLE Books
(
    id_book   INT AUTO_INCREMENT PRIMARY KEY,
    author    INT,
    title     VARCHAR(50),
    price     NUMERIC(10, 2),
    pub_year  INT,
    genre     VARCHAR(30),
    FOREIGN KEY (author) REFERENCES Authors(id_author)
);

INSERT INTO Authors (id_author, name, country) VALUES 
(1, 'Ullman',    'USA'),
(2, 'Hosseini',  'Afghanistan'),
(3, 'Huxley',    'England'),
(4, 'Yen',       'USA'),
(5, 'Cervantes', 'Spain');

INSERT INTO Books (author, title, price, pub_year, genre) VALUES 
(1, 'Elements of ML Programming', 60, 1998, 'computer science'),
(1, 'Mining of massive datasets', 75, 2014, 'computer science'),
(2, 'The Kite Runner',            32, 2004, 'drama'),
(3, 'Brave New World',            25, 1932 ,'science fiction'),
(3, 'Island',                     30, 1962, 'science fiction'),
(3, 'Ape and Essence',            20, 1948, 'science fiction'),
(4, 'Fuzzy Logic',                55, 1999, 'computer science');
'''
__testcode__ = r'''
SELECT * FROM Authors;
'''
invoke_cursor_sql(__db_code__)
invoke_cursor_sql(__student_answer__)
print(invoke_cursor_sql(__testcode__))</text>
				</extra>
				<display>
					<text>SHOW</text>
				</display>
				<outcome>15</outcome>
				<stderr></stderr>
			</testcase>
		</testcases>
	</question>
	<question type="coderunner">
		<coderunnertype>mysql_shared_v1.3</coderunnertype>
		<name>
			<text>MySQL - 03 - cache results</text>
		</name>
		<questiontext format="markdown">
			<text>Suppose the student sent e.g. incorrect solution. If the student does not update the answer, then pressing `Check` button does **not** evaluate the query again. In this case, the same results will be displayed.

You can verify this by running **a few times** the following MySQL query, which returns the current date and time:

```sql
SELECT NOW();
```

Note that the result is not changing.

After testing, clear the answer field, enter the query below and continue.

```sql
SELECT   title,
         price
FROM     Books
ORDER BY title;
```</text>
		</questiontext>
		<generalfeedback format="markdown">
			<text></text>
		</generalfeedback>
		<defaultgrade>1</defaultgrade>
		<penalty>0</penalty>
		<hidden>0</hidden>
		<idnumber></idnumber>
		<prototypetype>0</prototypetype>
		<allornothing>1</allornothing>
		<penaltyregime>0</penaltyregime>
		<precheck>0</precheck>
		<hidecheck>0</hidecheck>
		<showsource>0</showsource>
		<answerboxlines>18</answerboxlines>
		<answerboxcolumns>100</answerboxcolumns>
		<answerpreload></answerpreload>
		<globalextra></globalextra>
		<useace></useace>
		<resultcolumns></resultcolumns>
		<template></template>
		<iscombinatortemplate></iscombinatortemplate>
		<allowmultiplestdins></allowmultiplestdins>
		<answer>SELECT   title,
         price
FROM     Books
ORDER BY title;</answer>
		<validateonsave>1</validateonsave>
		<testsplitterre></testsplitterre>
		<language></language>
		<acelang></acelang>
		<sandbox></sandbox>
		<grader></grader>
		<cputimelimitsecs></cputimelimitsecs>
		<memlimitmb></memlimitmb>
		<sandboxparams></sandboxparams>
		<templateparams></templateparams>
		<hoisttemplateparams>1</hoisttemplateparams>
		<templateparamslang>None</templateparamslang>
		<templateparamsevalpertry>1</templateparamsevalpertry>
		<templateparamsevald>{}</templateparamsevald>
		<twigall>0</twigall>
		<uiplugin></uiplugin>
		<uiparameters></uiparameters>
		<attachments>0</attachments>
		<attachmentsrequired>0</attachmentsrequired>
		<maxfilesize>10240</maxfilesize>
		<filenamesregex></filenamesregex>
		<filenamesexplain></filenamesexplain>
		<displayfeedback>1</displayfeedback>
		<testcases>
			<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0">
				<testcode>
					<text></text>
				</testcode>
				<stdin>
					<text></text>
				</stdin>
				<expected>
					<text>                        title  price
1             Ape and Essence  20.00
2             Brave New World  25.00
3  Elements of ML Programming  60.00
4                 Fuzzy Logic  55.00
5                      Island  30.00
6  Mining of massive datasets  75.00
7             The Kite Runner  32.00</text>
				</expected>
				<extra>
					<text>__db_code__ = r'''
DROP TABLE IF EXISTS Books, Authors;

CREATE TABLE Authors
(
    id_author INT AUTO_INCREMENT PRIMARY KEY,
    name      VARCHAR(30),
    country   VARCHAR(15)
);

CREATE TABLE Books
(
    id_book   INT AUTO_INCREMENT PRIMARY KEY,
    author    INT,
    title     VARCHAR(50),
    price     NUMERIC(10, 2),
    pub_year  INT,
    genre     VARCHAR(30),
    FOREIGN KEY (author) REFERENCES Authors(id_author)
);

INSERT INTO Authors (id_author, name, country) VALUES 
(1, 'Ullman',    'USA'),
(2, 'Hosseini',  'Afghanistan'),
(3, 'Huxley',    'England'),
(4, 'Yen',       'USA'),
(5, 'Cervantes', 'Spain');

INSERT INTO Books (author, title, price, pub_year, genre) VALUES 
(1, 'Elements of ML Programming', 60, 1998, 'computer science'),
(1, 'Mining of massive datasets', 75, 2014, 'computer science'),
(2, 'The Kite Runner',            32, 2004, 'drama'),
(3, 'Brave New World',            25, 1932 ,'science fiction'),
(3, 'Island',                     30, 1962, 'science fiction'),
(3, 'Ape and Essence',            20, 1948, 'science fiction'),
(4, 'Fuzzy Logic',                55, 1999, 'computer science');
'''
invoke_cursor_sql(__db_code__)
print(invoke_cursor_sql(__student_answer__))</text>
				</extra>
				<display>
					<text>SHOW</text>
				</display>
				<outcome>15</outcome>
				<stderr></stderr>
			</testcase>
		</testcases>
	</question>
	<question type="coderunner">
		<coderunnertype>mysql_shared_v1.3</coderunnertype>
		<name>
			<text>MySQL - 04 - timeout</text>
		</name>
		<questiontext format="markdown">
			<text>Queries have limited execution time, usually from a few to several seconds. If the time is exceeded, the query will be aborted and an error message will be displayed.

You can verify this with the following MySQL query that tries to pause for 1 minute:

```sql
SELECT SLEEP(60);
```

After testing, clear the answer field, enter the query below and continue.

```sql
SELECT   title,
         price
FROM     Books
ORDER BY title;
```</text>
		</questiontext>
		<generalfeedback format="markdown">
			<text></text>
		</generalfeedback>
		<defaultgrade>1</defaultgrade>
		<penalty>0</penalty>
		<hidden>0</hidden>
		<idnumber></idnumber>
		<prototypetype>0</prototypetype>
		<allornothing>1</allornothing>
		<penaltyregime>0</penaltyregime>
		<precheck>0</precheck>
		<hidecheck>0</hidecheck>
		<showsource>0</showsource>
		<answerboxlines>18</answerboxlines>
		<answerboxcolumns>100</answerboxcolumns>
		<answerpreload></answerpreload>
		<globalextra></globalextra>
		<useace></useace>
		<resultcolumns></resultcolumns>
		<template></template>
		<iscombinatortemplate></iscombinatortemplate>
		<allowmultiplestdins></allowmultiplestdins>
		<answer>SELECT   title,
         price
FROM     Books
ORDER BY title;</answer>
		<validateonsave>1</validateonsave>
		<testsplitterre></testsplitterre>
		<language></language>
		<acelang></acelang>
		<sandbox></sandbox>
		<grader></grader>
		<cputimelimitsecs></cputimelimitsecs>
		<memlimitmb></memlimitmb>
		<sandboxparams></sandboxparams>
		<templateparams></templateparams>
		<hoisttemplateparams>1</hoisttemplateparams>
		<templateparamslang>None</templateparamslang>
		<templateparamsevalpertry>1</templateparamsevalpertry>
		<templateparamsevald>{}</templateparamsevald>
		<twigall>0</twigall>
		<uiplugin></uiplugin>
		<uiparameters></uiparameters>
		<attachments>0</attachments>
		<attachmentsrequired>0</attachmentsrequired>
		<maxfilesize>10240</maxfilesize>
		<filenamesregex></filenamesregex>
		<filenamesexplain></filenamesexplain>
		<displayfeedback>1</displayfeedback>
		<testcases>
			<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0">
				<testcode>
					<text></text>
				</testcode>
				<stdin>
					<text></text>
				</stdin>
				<expected>
					<text>                        title  price
1             Ape and Essence  20.00
2             Brave New World  25.00
3  Elements of ML Programming  60.00
4                 Fuzzy Logic  55.00
5                      Island  30.00
6  Mining of massive datasets  75.00
7             The Kite Runner  32.00</text>
				</expected>
				<extra>
					<text>__db_code__ = r'''
DROP TABLE IF EXISTS Books, Authors;

CREATE TABLE Authors
(
    id_author INT AUTO_INCREMENT PRIMARY KEY,
    name      VARCHAR(30),
    country   VARCHAR(15)
);

CREATE TABLE Books
(
    id_book   INT AUTO_INCREMENT PRIMARY KEY,
    author    INT,
    title     VARCHAR(50),
    price     NUMERIC(10, 2),
    pub_year  INT,
    genre     VARCHAR(30),
    FOREIGN KEY (author) REFERENCES Authors(id_author)
);

INSERT INTO Authors (id_author, name, country) VALUES 
(1, 'Ullman',    'USA'),
(2, 'Hosseini',  'Afghanistan'),
(3, 'Huxley',    'England'),
(4, 'Yen',       'USA'),
(5, 'Cervantes', 'Spain');

INSERT INTO Books (author, title, price, pub_year, genre) VALUES 
(1, 'Elements of ML Programming', 60, 1998, 'computer science'),
(1, 'Mining of massive datasets', 75, 2014, 'computer science'),
(2, 'The Kite Runner',            32, 2004, 'drama'),
(3, 'Brave New World',            25, 1932 ,'science fiction'),
(3, 'Island',                     30, 1962, 'science fiction'),
(3, 'Ape and Essence',            20, 1948, 'science fiction'),
(4, 'Fuzzy Logic',                55, 1999, 'computer science');
'''
invoke_cursor_sql(__db_code__)
print(invoke_cursor_sql(__student_answer__))</text>
				</extra>
				<display>
					<text>SHOW</text>
				</display>
				<outcome>15</outcome>
				<stderr></stderr>
			</testcase>
		</testcases>
	</question>
	<question type="coderunner">
		<coderunnertype>mysql_shared_v1.3</coderunnertype>
		<name>
			<text>MySQL - 05 - editor</text>
		</name>
		<questiontext format="markdown">
			<text>The editor has built-in MySQL syntax hints and is activated with `&lt;Ctrl+Space&gt;` key combination. This can be verified, for example, by writing the word `SELE` and pressing the aforementioned key combination. The editor does not suggest table names and attributes because it has no direct connection to the database.

&lt;img alt="" class="img-responsive" src="@@PLUGINFILE@@/editor.gif"&gt;

After testing, clear the answer field, enter the query below and continue.

```sql
SELECT   title,
         price
FROM     Books
ORDER BY title;
```</text>
			<file name="editor.gif" path="/" encoding="base64"></file>
		</questiontext>
		<generalfeedback format="markdown">
			<text></text>
		</generalfeedback>
		<defaultgrade>1</defaultgrade>
		<penalty>0</penalty>
		<hidden>0</hidden>
		<idnumber></idnumber>
		<prototypetype>0</prototypetype>
		<allornothing>1</allornothing>
		<penaltyregime>0</penaltyregime>
		<precheck>0</precheck>
		<hidecheck>0</hidecheck>
		<showsource>0</showsource>
		<answerboxlines>18</answerboxlines>
		<answerboxcolumns>100</answerboxcolumns>
		<answerpreload></answerpreload>
		<globalextra></globalextra>
		<useace></useace>
		<resultcolumns></resultcolumns>
		<template></template>
		<iscombinatortemplate></iscombinatortemplate>
		<allowmultiplestdins></allowmultiplestdins>
		<answer>SELECT   title,
         price
FROM     Books
ORDER BY title;</answer>
		<validateonsave>1</validateonsave>
		<testsplitterre></testsplitterre>
		<language></language>
		<acelang></acelang>
		<sandbox></sandbox>
		<grader></grader>
		<cputimelimitsecs></cputimelimitsecs>
		<memlimitmb></memlimitmb>
		<sandboxparams></sandboxparams>
		<templateparams></templateparams>
		<hoisttemplateparams>1</hoisttemplateparams>
		<templateparamslang>None</templateparamslang>
		<templateparamsevalpertry>1</templateparamsevalpertry>
		<templateparamsevald>{}</templateparamsevald>
		<twigall>0</twigall>
		<uiplugin></uiplugin>
		<uiparameters></uiparameters>
		<attachments>0</attachments>
		<attachmentsrequired>0</attachmentsrequired>
		<maxfilesize>10240</maxfilesize>
		<filenamesregex></filenamesregex>
		<filenamesexplain></filenamesexplain>
		<displayfeedback>1</displayfeedback>
		<testcases>
			<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0">
				<testcode>
					<text></text>
				</testcode>
				<stdin>
					<text></text>
				</stdin>
				<expected>
					<text>                        title  price
1             Ape and Essence  20.00
2             Brave New World  25.00
3  Elements of ML Programming  60.00
4                 Fuzzy Logic  55.00
5                      Island  30.00
6  Mining of massive datasets  75.00
7             The Kite Runner  32.00</text>
				</expected>
				<extra>
					<text>__db_code__ = r'''
DROP TABLE IF EXISTS Books, Authors;

CREATE TABLE Authors
(
    id_author INT AUTO_INCREMENT PRIMARY KEY,
    name      VARCHAR(30),
    country   VARCHAR(15)
);

CREATE TABLE Books
(
    id_book   INT AUTO_INCREMENT PRIMARY KEY,
    author    INT,
    title     VARCHAR(50),
    price     NUMERIC(10, 2),
    pub_year  INT,
    genre     VARCHAR(30),
    FOREIGN KEY (author) REFERENCES Authors(id_author)
);

INSERT INTO Authors (id_author, name, country) VALUES 
(1, 'Ullman',    'USA'),
(2, 'Hosseini',  'Afghanistan'),
(3, 'Huxley',    'England'),
(4, 'Yen',       'USA'),
(5, 'Cervantes', 'Spain');

INSERT INTO Books (author, title, price, pub_year, genre) VALUES 
(1, 'Elements of ML Programming', 60, 1998, 'computer science'),
(1, 'Mining of massive datasets', 75, 2014, 'computer science'),
(2, 'The Kite Runner',            32, 2004, 'drama'),
(3, 'Brave New World',            25, 1932 ,'science fiction'),
(3, 'Island',                     30, 1962, 'science fiction'),
(3, 'Ape and Essence',            20, 1948, 'science fiction'),
(4, 'Fuzzy Logic',                55, 1999, 'computer science');
'''
invoke_cursor_sql(__db_code__)
print(invoke_cursor_sql(__student_answer__))</text>
				</extra>
				<display>
					<text>SHOW</text>
				</display>
				<outcome>15</outcome>
				<stderr></stderr>
			</testcase>
		</testcases>
	</question>
	<question type="coderunner">
		<coderunnertype>mysql_shared_v1.3</coderunnertype>
		<name>
			<text>MySQL - 06 - error in query</text>
		</name>
		<questiontext format="markdown">
			<text>If the query returns an error on the server, an appropriate message will be displayed while comparing the results.

You can check the following query that is trying to display the contents of a non-existent column in `Books` table:

```sql
SELECT   title,
         price,
         this_column_not_exist
FROM     Books
ORDER BY title;
```

After testing, clear the answer field, enter the query below and continue.

```sql
SELECT   title,
         price
FROM     Books
ORDER BY title;
```</text>
		</questiontext>
		<generalfeedback format="markdown">
			<text></text>
		</generalfeedback>
		<defaultgrade>1</defaultgrade>
		<penalty>0</penalty>
		<hidden>0</hidden>
		<idnumber></idnumber>
		<prototypetype>0</prototypetype>
		<allornothing>1</allornothing>
		<penaltyregime>0</penaltyregime>
		<precheck>0</precheck>
		<hidecheck>0</hidecheck>
		<showsource>0</showsource>
		<answerboxlines>18</answerboxlines>
		<answerboxcolumns>100</answerboxcolumns>
		<answerpreload></answerpreload>
		<globalextra></globalextra>
		<useace></useace>
		<resultcolumns></resultcolumns>
		<template></template>
		<iscombinatortemplate></iscombinatortemplate>
		<allowmultiplestdins></allowmultiplestdins>
		<answer>SELECT   title,
         price
FROM     Books
ORDER BY title;</answer>
		<validateonsave>1</validateonsave>
		<testsplitterre></testsplitterre>
		<language></language>
		<acelang></acelang>
		<sandbox></sandbox>
		<grader></grader>
		<cputimelimitsecs></cputimelimitsecs>
		<memlimitmb></memlimitmb>
		<sandboxparams></sandboxparams>
		<templateparams></templateparams>
		<hoisttemplateparams>1</hoisttemplateparams>
		<templateparamslang>None</templateparamslang>
		<templateparamsevalpertry>1</templateparamsevalpertry>
		<templateparamsevald>{}</templateparamsevald>
		<twigall>0</twigall>
		<uiplugin></uiplugin>
		<uiparameters></uiparameters>
		<attachments>0</attachments>
		<attachmentsrequired>0</attachmentsrequired>
		<maxfilesize>10240</maxfilesize>
		<filenamesregex></filenamesregex>
		<filenamesexplain></filenamesexplain>
		<displayfeedback>1</displayfeedback>
		<testcases>
			<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0">
				<testcode>
					<text></text>
				</testcode>
				<stdin>
					<text></text>
				</stdin>
				<expected>
					<text>                        title  price
1             Ape and Essence  20.00
2             Brave New World  25.00
3  Elements of ML Programming  60.00
4                 Fuzzy Logic  55.00
5                      Island  30.00
6  Mining of massive datasets  75.00
7             The Kite Runner  32.00</text>
				</expected>
				<extra>
					<text>__db_code__ = r'''
DROP TABLE IF EXISTS Books, Authors;

CREATE TABLE Authors
(
    id_author INT AUTO_INCREMENT PRIMARY KEY,
    name      VARCHAR(30),
    country   VARCHAR(15)
);

CREATE TABLE Books
(
    id_book   INT AUTO_INCREMENT PRIMARY KEY,
    author    INT,
    title     VARCHAR(50),
    price     NUMERIC(10, 2),
    pub_year  INT,
    genre     VARCHAR(30),
    FOREIGN KEY (author) REFERENCES Authors(id_author)
);

INSERT INTO Authors (id_author, name, country) VALUES 
(1, 'Ullman',    'USA'),
(2, 'Hosseini',  'Afghanistan'),
(3, 'Huxley',    'England'),
(4, 'Yen',       'USA'),
(5, 'Cervantes', 'Spain');

INSERT INTO Books (author, title, price, pub_year, genre) VALUES 
(1, 'Elements of ML Programming', 60, 1998, 'computer science'),
(1, 'Mining of massive datasets', 75, 2014, 'computer science'),
(2, 'The Kite Runner',            32, 2004, 'drama'),
(3, 'Brave New World',            25, 1932 ,'science fiction'),
(3, 'Island',                     30, 1962, 'science fiction'),
(3, 'Ape and Essence',            20, 1948, 'science fiction'),
(4, 'Fuzzy Logic',                55, 1999, 'computer science');
'''
invoke_cursor_sql(__db_code__)
print(invoke_cursor_sql(__student_answer__))</text>
				</extra>
				<display>
					<text>SHOW</text>
				</display>
				<outcome>15</outcome>
				<stderr></stderr>
			</testcase>
		</testcases>
	</question>
	<question type="coderunner">
		<coderunnertype>mysql_shared_v1.3</coderunnertype>
		<name>
			<text>MySQL - 07 - hidden test case</text>
		</name>
		<questiontext format="markdown">
			<text>To limit submissions with hard-coded solutions, some test cases may not be visible to students (they are visible only to the instructors).

Display `title` and `price` of the last published book.

You can check the following two solutions:

a) incorrect (but matches the example shown below):

```sql
SELECT title,
       price
FROM   Books
WHERE  title = 'Mining of massive datasets';
```

b) correct:

```sql
SELECT title,
       price
FROM   Books
WHERE  pub_year = (SELECT MAX(pub_year)
                   FROM   Books);
```

Note that when the code fails the hidden test, you'll see this message:

&gt; *Your code failed one or more hidden tests.*&lt;br&gt;
&gt; *Your code must pass all tests to earn any marks. Try again.*</text>
		</questiontext>
		<generalfeedback format="markdown">
			<text></text>
		</generalfeedback>
		<defaultgrade>1</defaultgrade>
		<penalty>0</penalty>
		<hidden>0</hidden>
		<idnumber></idnumber>
		<prototypetype>0</prototypetype>
		<allornothing>1</allornothing>
		<penaltyregime>0</penaltyregime>
		<precheck>0</precheck>
		<hidecheck>0</hidecheck>
		<showsource>0</showsource>
		<answerboxlines>18</answerboxlines>
		<answerboxcolumns>100</answerboxcolumns>
		<answerpreload></answerpreload>
		<globalextra></globalextra>
		<useace></useace>
		<resultcolumns></resultcolumns>
		<template></template>
		<iscombinatortemplate></iscombinatortemplate>
		<allowmultiplestdins></allowmultiplestdins>
		<answer>SELECT title,
       price
FROM   Books
WHERE  pub_year = (SELECT MAX(pub_year)
                   FROM   Books);</answer>
		<validateonsave>1</validateonsave>
		<testsplitterre></testsplitterre>
		<language></language>
		<acelang></acelang>
		<sandbox></sandbox>
		<grader></grader>
		<cputimelimitsecs></cputimelimitsecs>
		<memlimitmb></memlimitmb>
		<sandboxparams></sandboxparams>
		<templateparams></templateparams>
		<hoisttemplateparams>1</hoisttemplateparams>
		<templateparamslang>None</templateparamslang>
		<templateparamsevalpertry>1</templateparamsevalpertry>
		<templateparamsevald>{}</templateparamsevald>
		<twigall>0</twigall>
		<uiplugin></uiplugin>
		<uiparameters></uiparameters>
		<attachments>0</attachments>
		<attachmentsrequired>0</attachmentsrequired>
		<maxfilesize>10240</maxfilesize>
		<filenamesregex></filenamesregex>
		<filenamesexplain></filenamesexplain>
		<displayfeedback>1</displayfeedback>
		<testcases>
			<testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0">
				<testcode>
					<text></text>
				</testcode>
				<stdin>
					<text></text>
				</stdin>
				<expected>
					<text>                        title  price
1  Mining of massive datasets  75.00</text>
				</expected>
				<extra>
					<text>__db_code__ = r'''
DROP TABLE IF EXISTS Books, Authors;

CREATE TABLE Authors
(
    id_author INT AUTO_INCREMENT PRIMARY KEY,
    name      VARCHAR(30),
    country   VARCHAR(15)
);

CREATE TABLE Books
(
    id_book   INT AUTO_INCREMENT PRIMARY KEY,
    author    INT,
    title     VARCHAR(50),
    price     NUMERIC(10, 2),
    pub_year  INT,
    genre     VARCHAR(30),
    FOREIGN KEY (author) REFERENCES Authors(id_author)
);

INSERT INTO Authors (id_author, name, country) VALUES 
(1, 'Ullman',    'USA'),
(2, 'Hosseini',  'Afghanistan'),
(3, 'Huxley',    'England'),
(4, 'Yen',       'USA'),
(5, 'Cervantes', 'Spain');

INSERT INTO Books (author, title, price, pub_year, genre) VALUES 
(1, 'Elements of ML Programming', 60, 1998, 'computer science'),
(1, 'Mining of massive datasets', 75, 2014, 'computer science'),
(2, 'The Kite Runner',            32, 2004, 'drama'),
(3, 'Brave New World',            25, 1932 ,'science fiction'),
(3, 'Island',                     30, 1962, 'science fiction'),
(3, 'Ape and Essence',            20, 1948, 'science fiction'),
(4, 'Fuzzy Logic',                55, 1999, 'computer science');
'''
invoke_cursor_sql(__db_code__)
print(invoke_cursor_sql(__student_answer__))</text>
				</extra>
				<display>
					<text>SHOW</text>
				</display>
				<outcome>15</outcome>
				<stderr></stderr>
			</testcase>
			<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0">
				<testcode>
					<text></text>
				</testcode>
				<stdin>
					<text></text>
				</stdin>
				<expected>
					<text>         title  price
1  Fuzzy Logic  55.00</text>
				</expected>
				<extra>
					<text>__db_code__ = r'''
DROP TABLE IF EXISTS Books, Authors;

CREATE TABLE Authors
(
    id_author INT AUTO_INCREMENT PRIMARY KEY,
    name      VARCHAR(30),
    country   VARCHAR(15)
);

CREATE TABLE Books
(
    id_book   INT AUTO_INCREMENT PRIMARY KEY,
    author    INT,
    title     VARCHAR(50),
    price     NUMERIC(10, 2),
    pub_year  INT,
    genre     VARCHAR(30),
    FOREIGN KEY (author) REFERENCES Authors(id_author)
);

INSERT INTO Authors (id_author, name, country) VALUES 
(1, 'Ullman',      'USA'),
(2, 'Hosseini',    'Afghanistan'),
(3, 'Huxley',      'England'),
(4, 'Yen',         'USA'),
(5, 'Cervantes',   'Spain');

INSERT INTO Books (author, title, price, pub_year, genre) VALUES 
(1, 'Elements of ML Programming', 60, 1998, 'computer science'),
(3, 'Brave New World',            25, 1932 ,'science fiction'),
(3, 'Island',                     30, 1962, 'science fiction'),
(3, 'Ape and Essence',            20, 1948, 'science fiction'),
(4, 'Fuzzy Logic',                55, 1999, 'computer science');
'''
invoke_cursor_sql(__db_code__)
print(invoke_cursor_sql(__student_answer__))</text>
				</extra>
				<display>
					<text>HIDE</text>
				</display>
				<outcome>15</outcome>
				<stderr></stderr>
			</testcase>
		</testcases>
	</question>
	<question type="coderunner">
		<coderunnertype>mysql_shared_v1.3</coderunnertype>
		<name>
			<text>MySQL - 08 - checking SQL structure - grammar</text>
		</name>
		<questiontext format="markdown">
			<text>Introductory database courses cover many SQL query structures, such as joins and subqueries. Sometimes the teacher may require to solve a given problem with a given method. In this case, the student's submitted solution is first parsed, and then the used MySQL grammar elements are checked.

Display `title` and `price` of the last published book. Use subquery.

You can check the following two solutions:

a) incorrect:

```sql
SELECT   title,
         price
FROM     Books
ORDER BY pub_year DESC
LIMIT    1;
```

b) correct:

```sql
SELECT title,
       price
FROM   Books
WHERE  pub_year = (SELECT MAX(pub_year)
                   FROM   Books);
```

Note that the first test case checks which MySQL grammar elements were used in the submitted query.</text>
		</questiontext>
		<generalfeedback format="markdown">
			<text></text>
		</generalfeedback>
		<defaultgrade>1</defaultgrade>
		<penalty>0</penalty>
		<hidden>0</hidden>
		<idnumber></idnumber>
		<prototypetype>0</prototypetype>
		<allornothing>1</allornothing>
		<penaltyregime>0</penaltyregime>
		<precheck>0</precheck>
		<hidecheck>0</hidecheck>
		<showsource>0</showsource>
		<answerboxlines>18</answerboxlines>
		<answerboxcolumns>100</answerboxcolumns>
		<answerpreload></answerpreload>
		<globalextra></globalextra>
		<useace></useace>
		<resultcolumns></resultcolumns>
		<template></template>
		<iscombinatortemplate></iscombinatortemplate>
		<allowmultiplestdins></allowmultiplestdins>
		<answer>SELECT title,
       price
FROM   Books
WHERE  pub_year = (SELECT MAX(pub_year)
                   FROM   Books);</answer>
		<validateonsave>1</validateonsave>
		<testsplitterre></testsplitterre>
		<language></language>
		<acelang></acelang>
		<sandbox></sandbox>
		<grader></grader>
		<cputimelimitsecs></cputimelimitsecs>
		<memlimitmb></memlimitmb>
		<sandboxparams></sandboxparams>
		<templateparams></templateparams>
		<hoisttemplateparams>1</hoisttemplateparams>
		<templateparamslang>None</templateparamslang>
		<templateparamsevalpertry>1</templateparamsevalpertry>
		<templateparamsevald>{}</templateparamsevald>
		<twigall>0</twigall>
		<uiplugin></uiplugin>
		<uiparameters></uiparameters>
		<attachments>0</attachments>
		<attachmentsrequired>0</attachmentsrequired>
		<maxfilesize>10240</maxfilesize>
		<filenamesregex></filenamesregex>
		<filenamesexplain></filenamesexplain>
		<displayfeedback>1</displayfeedback>
		<testcases>
			<testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0">
				<testcode>
					<text></text>
				</testcode>
				<stdin>
					<text></text>
				</stdin>
				<expected>
					<text>Matched grammar elements: subqueryexpressionatom</text>
				</expected>
				<extra>
					<text>print(check_query_grammar_elements(['subqueryexpressionatom']))</text>
				</extra>
				<display>
					<text>SHOW</text>
				</display>
				<outcome>15</outcome>
				<stderr></stderr>
			</testcase>
			<testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0">
				<testcode>
					<text></text>
				</testcode>
				<stdin>
					<text></text>
				</stdin>
				<expected>
					<text>         title  price
1  Fuzzy Logic  55.00</text>
				</expected>
				<extra>
					<text>__db_code__ = r'''
DROP TABLE IF EXISTS Books, Authors;

CREATE TABLE Authors
(
    id_author INT AUTO_INCREMENT PRIMARY KEY,
    name      VARCHAR(30),
    country   VARCHAR(15)
);

CREATE TABLE Books
(
    id_book   INT AUTO_INCREMENT PRIMARY KEY,
    author    INT,
    title     VARCHAR(50),
    price     NUMERIC(10, 2),
    pub_year  INT,
    genre     VARCHAR(30),
    FOREIGN KEY (author) REFERENCES Authors(id_author)
);

INSERT INTO Authors (id_author, name, country) VALUES 
(1, 'Ullman',      'USA'),
(2, 'Hosseini',    'Afghanistan'),
(3, 'Huxley',      'England'),
(4, 'Yen',         'USA'),
(5, 'Cervantes',   'Spain');

INSERT INTO Books (author, title, price, pub_year, genre) VALUES 
(1, 'Elements of ML Programming', 60, 1998, 'computer science'),
(3, 'Brave New World',            25, 1932 ,'science fiction'),
(3, 'Island',                     30, 1962, 'science fiction'),
(3, 'Ape and Essence',            20, 1948, 'science fiction'),
(4, 'Fuzzy Logic',                55, 1999, 'computer science');
'''
invoke_cursor_sql(__db_code__)
print(invoke_cursor_sql(__student_answer__))</text>
				</extra>
				<display>
					<text>SHOW</text>
				</display>
				<outcome>15</outcome>
				<stderr></stderr>
			</testcase>
		</testcases>
	</question>
	<question type="coderunner">
		<coderunnertype>mysql_shared_v1.3</coderunnertype>
		<name>
			<text>MySQL - 09 - checking SQL structure - tokens</text>
		</name>
		<questiontext format="markdown">
			<text>A similar check may apply not only to the MySQL grammar, but also to the tokens.

Display genres that have at least 3 books. Use `HAVING`. Order by genre.

You can check the following solution:

```sql
SELECT   genre, 
         COUNT(*) AS "no of books"
FROM     Books
GROUP BY genre
HAVING   COUNT(*) &gt;= 3
ORDER BY genre;
```

Note that the first test case checks which MySQL tokens were used in the submitted query.</text>
		</questiontext>
		<generalfeedback format="markdown">
			<text></text>
		</generalfeedback>
		<defaultgrade>1</defaultgrade>
		<penalty>0</penalty>
		<hidden>0</hidden>
		<idnumber></idnumber>
		<prototypetype>0</prototypetype>
		<allornothing>1</allornothing>
		<penaltyregime>0</penaltyregime>
		<precheck>0</precheck>
		<hidecheck>0</hidecheck>
		<showsource>0</showsource>
		<answerboxlines>18</answerboxlines>
		<answerboxcolumns>100</answerboxcolumns>
		<answerpreload></answerpreload>
		<globalextra></globalextra>
		<useace></useace>
		<resultcolumns></resultcolumns>
		<template></template>
		<iscombinatortemplate></iscombinatortemplate>
		<allowmultiplestdins></allowmultiplestdins>
		<answer>SELECT   genre, 
         COUNT(*) AS "no of books"
FROM     Books
GROUP BY genre
HAVING   COUNT(*) &gt;= 3
ORDER BY genre;</answer>
		<validateonsave>1</validateonsave>
		<testsplitterre></testsplitterre>
		<language></language>
		<acelang></acelang>
		<sandbox></sandbox>
		<grader></grader>
		<cputimelimitsecs></cputimelimitsecs>
		<memlimitmb></memlimitmb>
		<sandboxparams></sandboxparams>
		<templateparams></templateparams>
		<hoisttemplateparams>1</hoisttemplateparams>
		<templateparamslang>None</templateparamslang>
		<templateparamsevalpertry>1</templateparamsevalpertry>
		<templateparamsevald>{}</templateparamsevald>
		<twigall>0</twigall>
		<uiplugin></uiplugin>
		<uiparameters></uiparameters>
		<attachments>0</attachments>
		<attachmentsrequired>0</attachmentsrequired>
		<maxfilesize>10240</maxfilesize>
		<filenamesregex></filenamesregex>
		<filenamesexplain></filenamesexplain>
		<displayfeedback>1</displayfeedback>
		<testcases>
			<testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0">
				<testcode>
					<text></text>
				</testcode>
				<stdin>
					<text></text>
				</stdin>
				<expected>
					<text>Matched tokens: HAVING</text>
				</expected>
				<extra>
					<text>print(check_query_tokens(['having']))</text>
				</extra>
				<display>
					<text>SHOW</text>
				</display>
				<outcome>15</outcome>
				<stderr></stderr>
			</testcase>
			<testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0">
				<testcode>
					<text></text>
				</testcode>
				<stdin>
					<text></text>
				</stdin>
				<expected>
					<text>              genre  no of books
1  computer science            3
2   science fiction            3</text>
				</expected>
				<extra>
					<text>__db_code__ = r'''
DROP TABLE IF EXISTS Books, Authors;

CREATE TABLE Authors
(
    id_author INT AUTO_INCREMENT PRIMARY KEY,
    name      VARCHAR(30),
    country   VARCHAR(15)
);

CREATE TABLE Books
(
    id_book   INT AUTO_INCREMENT PRIMARY KEY,
    author    INT,
    title     VARCHAR(50),
    price     NUMERIC(10, 2),
    pub_year  INT,
    genre     VARCHAR(30),
    FOREIGN KEY (author) REFERENCES Authors(id_author)
);

INSERT INTO Authors (id_author, name, country) VALUES 
(1, 'Ullman',    'USA'),
(2, 'Hosseini',  'Afghanistan'),
(3, 'Huxley',    'England'),
(4, 'Yen',       'USA'),
(5, 'Cervantes', 'Spain');

INSERT INTO Books (author, title, price, pub_year, genre) VALUES 
(1, 'Elements of ML Programming', 60, 1998, 'computer science'),
(1, 'Mining of massive datasets', 75, 2014, 'computer science'),
(2, 'The Kite Runner',            32, 2004, 'drama'),
(3, 'Brave New World',            25, 1932 ,'science fiction'),
(3, 'Island',                     30, 1962, 'science fiction'),
(3, 'Ape and Essence',            20, 1948, 'science fiction'),
(4, 'Fuzzy Logic',                55, 1999, 'computer science');
'''
invoke_cursor_sql(__db_code__)
print(invoke_cursor_sql(__student_answer__))</text>
				</extra>
				<display>
					<text>SHOW</text>
				</display>
				<outcome>15</outcome>
				<stderr></stderr>
			</testcase>
		</testcases>
	</question>
	<question type="coderunner">
		<coderunnertype>mysql_shared_v1.3</coderunnertype>
		<name>
			<text>MySQL - 10 - checking SQL structure - parse error</text>
		</name>
		<questiontext format="markdown">
			<text>If the submitted query is parsed to check grammar and/or tokens, it may happen that the submitted solution returns an error in the parsing step because the submitted query has a syntax error.

You can check the following solution:

```sql
SELECT   genre, 
         COUNT(*) AS "no of books"
FROM     Books
... and somewhere here HAVING
```

After verifying results of the above query, clear the answer field, enter the code below and proceed further:

```sql
SELECT   genre, 
         COUNT(*) AS "no of books"
FROM     Books
GROUP BY genre
HAVING   COUNT(*) &gt;= 3
ORDER BY genre;
```</text>
		</questiontext>
		<generalfeedback format="markdown">
			<text></text>
		</generalfeedback>
		<defaultgrade>1</defaultgrade>
		<penalty>0</penalty>
		<hidden>0</hidden>
		<idnumber></idnumber>
		<prototypetype>0</prototypetype>
		<allornothing>1</allornothing>
		<penaltyregime>0</penaltyregime>
		<precheck>0</precheck>
		<hidecheck>0</hidecheck>
		<showsource>0</showsource>
		<answerboxlines>18</answerboxlines>
		<answerboxcolumns>100</answerboxcolumns>
		<answerpreload></answerpreload>
		<globalextra></globalextra>
		<useace></useace>
		<resultcolumns></resultcolumns>
		<template></template>
		<iscombinatortemplate></iscombinatortemplate>
		<allowmultiplestdins></allowmultiplestdins>
		<answer>SELECT   genre, 
         COUNT(*) AS "no of books"
FROM     Books
GROUP BY genre
HAVING   COUNT(*) &gt;= 3
ORDER BY genre;</answer>
		<validateonsave>1</validateonsave>
		<testsplitterre></testsplitterre>
		<language></language>
		<acelang></acelang>
		<sandbox></sandbox>
		<grader></grader>
		<cputimelimitsecs></cputimelimitsecs>
		<memlimitmb></memlimitmb>
		<sandboxparams></sandboxparams>
		<templateparams></templateparams>
		<hoisttemplateparams>1</hoisttemplateparams>
		<templateparamslang>None</templateparamslang>
		<templateparamsevalpertry>1</templateparamsevalpertry>
		<templateparamsevald>{}</templateparamsevald>
		<twigall>0</twigall>
		<uiplugin></uiplugin>
		<uiparameters></uiparameters>
		<attachments>0</attachments>
		<attachmentsrequired>0</attachmentsrequired>
		<maxfilesize>10240</maxfilesize>
		<filenamesregex></filenamesregex>
		<filenamesexplain></filenamesexplain>
		<displayfeedback>1</displayfeedback>
		<testcases>
			<testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0">
				<testcode>
					<text></text>
				</testcode>
				<stdin>
					<text></text>
				</stdin>
				<expected>
					<text>Matched tokens: HAVING</text>
				</expected>
				<extra>
					<text>print(check_query_tokens(['having']))</text>
				</extra>
				<display>
					<text>SHOW</text>
				</display>
				<outcome>15</outcome>
				<stderr></stderr>
			</testcase>
			<testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0">
				<testcode>
					<text></text>
				</testcode>
				<stdin>
					<text></text>
				</stdin>
				<expected>
					<text>              genre  no of books
1  computer science            3
2   science fiction            3</text>
				</expected>
				<extra>
					<text>__db_code__ = r'''
DROP TABLE IF EXISTS Books, Authors;

CREATE TABLE Authors
(
    id_author INT AUTO_INCREMENT PRIMARY KEY,
    name      VARCHAR(30),
    country   VARCHAR(15)
);

CREATE TABLE Books
(
    id_book   INT AUTO_INCREMENT PRIMARY KEY,
    author    INT,
    title     VARCHAR(50),
    price     NUMERIC(10, 2),
    pub_year  INT,
    genre     VARCHAR(30),
    FOREIGN KEY (author) REFERENCES Authors(id_author)
);

INSERT INTO Authors (id_author, name, country) VALUES 
(1, 'Ullman',    'USA'),
(2, 'Hosseini',  'Afghanistan'),
(3, 'Huxley',    'England'),
(4, 'Yen',       'USA'),
(5, 'Cervantes', 'Spain');

INSERT INTO Books (author, title, price, pub_year, genre) VALUES 
(1, 'Elements of ML Programming', 60, 1998, 'computer science'),
(1, 'Mining of massive datasets', 75, 2014, 'computer science'),
(2, 'The Kite Runner',            32, 2004, 'drama'),
(3, 'Brave New World',            25, 1932 ,'science fiction'),
(3, 'Island',                     30, 1962, 'science fiction'),
(3, 'Ape and Essence',            20, 1948, 'science fiction'),
(4, 'Fuzzy Logic',                55, 1999, 'computer science');

'''
invoke_cursor_sql(__db_code__)
print(invoke_cursor_sql(__student_answer__))</text>
				</extra>
				<display>
					<text>SHOW</text>
				</display>
				<outcome>15</outcome>
				<stderr></stderr>
			</testcase>
		</testcases>
	</question>
	<question type="coderunner">
		<coderunnertype>mysql_shared_v1.3</coderunnertype>
		<name>
			<text>MySQL - 11 - checking SQL structure - hacking</text>
		</name>
		<questiontext format="markdown">
			<text>Sometimes the teacher requires to send only one `SELECT` expression. Solutions having several such expressions (separate or combined using set theory operations) might not be accepted. Additionally, it may be required to use one SQL structure (e.g. a subquery) without using another SQL structure (e.g. without joining the tables). All these checks are made at the stage of parsing the submitted solution.

Display `title` and `price` of the last published book. Use subquery, do not use `LIMIT`.

You can check the following solutions:

a) incorrect:

```sql
SELECT   title,
         price
FROM     Books
ORDER BY pub_year DESC
LIMIT    1;
SELECT   1
FROM     Books
WHERE    1 = (SELECT 0);
```

b) incorrect:

```sql
SELECT   B1.title,
         B1.price
FROM     Books B1
         LEFT OUTER JOIN Books B2
                      ON B1.pub_year &lt; B2.pub_year
WHERE    B2.title IS NULL
UNION
SELECT   title,
         price
FROM     Books
WHERE    1 = (SELECT 0);
```

c) correct:

```sql
SELECT title,
       price
FROM   Books
WHERE  pub_year = (SELECT MAX(pub_year)
                   FROM   Books);
```</text>
		</questiontext>
		<generalfeedback format="markdown">
			<text></text>
		</generalfeedback>
		<defaultgrade>1</defaultgrade>
		<penalty>0</penalty>
		<hidden>0</hidden>
		<idnumber></idnumber>
		<prototypetype>0</prototypetype>
		<allornothing>1</allornothing>
		<penaltyregime>0</penaltyregime>
		<precheck>0</precheck>
		<hidecheck>0</hidecheck>
		<showsource>0</showsource>
		<answerboxlines>18</answerboxlines>
		<answerboxcolumns>100</answerboxcolumns>
		<answerpreload></answerpreload>
		<globalextra></globalextra>
		<useace></useace>
		<resultcolumns></resultcolumns>
		<template></template>
		<iscombinatortemplate></iscombinatortemplate>
		<allowmultiplestdins></allowmultiplestdins>
		<answer>SELECT title,
       price
FROM   Books
WHERE  pub_year = (SELECT MAX(pub_year)
                   FROM   Books);</answer>
		<validateonsave>1</validateonsave>
		<testsplitterre></testsplitterre>
		<language></language>
		<acelang></acelang>
		<sandbox></sandbox>
		<grader></grader>
		<cputimelimitsecs></cputimelimitsecs>
		<memlimitmb></memlimitmb>
		<sandboxparams></sandboxparams>
		<templateparams></templateparams>
		<hoisttemplateparams>1</hoisttemplateparams>
		<templateparamslang>None</templateparamslang>
		<templateparamsevalpertry>1</templateparamsevalpertry>
		<templateparamsevald>{}</templateparamsevald>
		<twigall>0</twigall>
		<uiplugin></uiplugin>
		<uiparameters></uiparameters>
		<attachments>0</attachments>
		<attachmentsrequired>0</attachmentsrequired>
		<maxfilesize>10240</maxfilesize>
		<filenamesregex></filenamesregex>
		<filenamesexplain></filenamesexplain>
		<displayfeedback>1</displayfeedback>
		<testcases>
			<testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0">
				<testcode>
					<text></text>
				</testcode>
				<stdin>
					<text></text>
				</stdin>
				<expected>
					<text>Matched grammar elements: subqueryexpressionatom
Matched tokens:</text>
				</expected>
				<extra>
					<text>print(check_query_grammar_elements(['multiplesqlstatements', 'subqueryexpressionatom']))
print(check_query_tokens(['limit', 'union', 'intersect', 'except']))</text>
				</extra>
				<display>
					<text>SHOW</text>
				</display>
				<outcome>15</outcome>
				<stderr></stderr>
			</testcase>
			<testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0">
				<testcode>
					<text></text>
				</testcode>
				<stdin>
					<text></text>
				</stdin>
				<expected>
					<text>                        title  price
1  Mining of massive datasets  75.00</text>
				</expected>
				<extra>
					<text>__db_code__ = r'''
DROP TABLE IF EXISTS Books, Authors;

CREATE TABLE Authors
(
    id_author INT AUTO_INCREMENT PRIMARY KEY,
    name      VARCHAR(30),
    country   VARCHAR(15)
);

CREATE TABLE Books
(
    id_book   INT AUTO_INCREMENT PRIMARY KEY,
    author    INT,
    title     VARCHAR(50),
    price     NUMERIC(10, 2),
    pub_year  INT,
    genre     VARCHAR(30),
    FOREIGN KEY (author) REFERENCES Authors(id_author)
);

INSERT INTO Authors (id_author, name, country) VALUES 
(1, 'Ullman',    'USA'),
(2, 'Hosseini',  'Afghanistan'),
(3, 'Huxley',    'England'),
(4, 'Yen',       'USA'),
(5, 'Cervantes', 'Spain');

INSERT INTO Books (author, title, price, pub_year, genre) VALUES 
(1, 'Elements of ML Programming', 60, 1998, 'computer science'),
(1, 'Mining of massive datasets', 75, 2014, 'computer science'),
(2, 'The Kite Runner',            32, 2004, 'drama'),
(3, 'Brave New World',            25, 1932 ,'science fiction'),
(3, 'Island',                     30, 1962, 'science fiction'),
(3, 'Ape and Essence',            20, 1948, 'science fiction'),
(4, 'Fuzzy Logic',                55, 1999, 'computer science');

'''
invoke_cursor_sql(__db_code__)
print(invoke_cursor_sql(__student_answer__))</text>
				</extra>
				<display>
					<text>SHOW</text>
				</display>
				<outcome>15</outcome>
				<stderr></stderr>
			</testcase>
			<testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0">
				<testcode>
					<text></text>
				</testcode>
				<stdin>
					<text></text>
				</stdin>
				<expected>
					<text>         title  price
1  Fuzzy Logic  55.00</text>
				</expected>
				<extra>
					<text>__db_code__ = r'''
DROP TABLE IF EXISTS Books, Authors;

CREATE TABLE Authors
(
    id_author INT AUTO_INCREMENT PRIMARY KEY,
    name      VARCHAR(30),
    country   VARCHAR(15)
);

CREATE TABLE Books
(
    id_book   INT AUTO_INCREMENT PRIMARY KEY,
    author    INT,
    title     VARCHAR(50),
    price     NUMERIC(10, 2),
    pub_year  INT,
    genre     VARCHAR(30),
    FOREIGN KEY (author) REFERENCES Authors(id_author)
);

INSERT INTO Authors (id_author, name, country) VALUES 
(1, 'Ullman',      'USA'),
(2, 'Hosseini',    'Afghanistan'),
(3, 'Huxley',      'England'),
(4, 'Yen',         'USA'),
(5, 'Cervantes',   'Spain');

INSERT INTO Books (author, title, price, pub_year, genre) VALUES 
(1, 'Elements of ML Programming', 60, 1998, 'computer science'),
(3, 'Brave New World',            25, 1932 ,'science fiction'),
(3, 'Island',                     30, 1962, 'science fiction'),
(3, 'Ape and Essence',            20, 1948, 'science fiction'),
(4, 'Fuzzy Logic',                55, 1999, 'computer science');
'''
invoke_cursor_sql(__db_code__)
print(invoke_cursor_sql(__student_answer__))</text>
				</extra>
				<display>
					<text>HIDE</text>
				</display>
				<outcome>15</outcome>
				<stderr></stderr>
			</testcase>
		</testcases>
	</question>
</quiz>
